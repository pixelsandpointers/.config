(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[nil nil #3=(headline (:raw-value #1="WAIT Emacs Config" :begin 24 :end 19129 :pre-blank 0 :contents-begin 44 :contents-end 19129 :robust-begin 46 :robust-end 19127 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 24 :title #1# :mode nil :granularity element :cached t :parent #28=(org-data (:begin 1 :contents-begin 1 :contents-end 19129 :end 19129 :robust-begin 3 :robust-end 19127 :post-blank 0 :post-affiliated 1 :path "c:/Users/benja/.emacs.d/init.org" :mode org-data :CATEGORY "init" :cached t :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #10=(headline (:raw-value #2="Editor" :begin 583 :end 763 :pre-blank 0 :contents-begin 593 :contents-end 763 :robust-begin 595 :robust-end 761 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 583 :title #2# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #29=(headline (:raw-value #4="Packages" :begin 136 :end 583 :pre-blank 0 :contents-begin 148 :contents-end 583 :robust-begin 150 :robust-end 581 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 136 :title #4# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[nil nil #7=(headline (:raw-value #5="Visuals" :begin 763 :end 1598 :pre-blank 0 :contents-begin 774 :contents-end 1597 :robust-begin 776 :robust-end 1595 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 763 :title #5# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #36=(headline (:raw-value #6="Font" :begin 1226 :end 1236 :pre-blank 0 :contents-begin nil :contents-end nil :robust-begin nil :robust-end nil :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1226 :title #6# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #7#)) 0] #33=(headline (:raw-value #8="UI" :begin 774 :end 1226 :pre-blank 0 :contents-begin 781 :contents-end 1226 :robust-begin 783 :robust-end 1224 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 774 :title #8# :parent #7# :cached t :org-element--cache-sync-key nil :granularity element)) 0] #31=(headline (:raw-value #9="File Cache" :begin 593 :end 763 :pre-blank 0 :contents-begin 608 :contents-end 763 :robust-begin 610 :robust-end 761 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 593 :title #9# :mode section :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [[[[nil nil #37=(headline (:raw-value #11="Icons" :begin 1356 :end 1439 :pre-blank 0 :contents-begin 1366 :contents-end 1439 :robust-begin 1368 :robust-end 1437 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1356 :title #11# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #7#)) 0] [nil nil #15=(headline (:raw-value #12="Editing" :begin 1598 :end 2947 :pre-blank 0 :contents-begin 1609 :contents-end 2947 :robust-begin 1611 :robust-end 2945 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1598 :title #12# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #3#)) 0] #40=(headline (:raw-value #13="Modeline" :begin 1439 :end 1598 :pre-blank 0 :contents-begin 1452 :contents-end 1597 :robust-begin 1454 :robust-end 1595 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1439 :title #13# :parent #7# :cached t :org-element--cache-sync-key nil :granularity element)) 0] [[nil nil #44=(headline (:raw-value #14="WhichKey" :begin 2771 :end 2947 :pre-blank 0 :contents-begin 2784 :contents-end 2947 :robust-begin 2786 :robust-end 2945 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2771 :title #14# :mode nil :granularity element :cached t :parent #15# :org-element--cache-sync-key nil)) 0] [nil nil #20=(headline (:raw-value #16="Autocomplete" :begin 3483 :end 11118 :pre-blank 0 :contents-begin 3499 :contents-end 11117 :robust-begin 3501 :robust-end 11115 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3483 :title #16# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #45=(headline (:raw-value #17="LSP" :begin 2947 :end 3483 :pre-blank 0 :contents-begin 2954 :contents-end 3483 :robust-begin 2956 :robust-end 3481 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2947 :title #17# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #43=(headline (:raw-value #18="Evil" :begin 1793 :end 2771 :pre-blank 0 :contents-begin 1802 :contents-end 2771 :robust-begin 1804 :robust-end 2769 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1793 :title #18# :mode nil :granularity element :cached t :parent #15# :org-element--cache-sync-key nil)) 0] [[nil nil #50=(headline (:raw-value #19="Snippets" :begin 3947 :end 4661 :pre-blank 0 :contents-begin 3960 :contents-end 4661 :robust-begin 3962 :robust-end 4659 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3947 :title #19# :mode nil :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 0] [[nil nil #23=(headline (:raw-value #21="Org Everything" :begin 11118 :end 19129 :pre-blank 1 :contents-begin 11137 :contents-end 19129 :robust-begin 11139 :robust-end 19127 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 11118 :title #21# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #54=(headline (:raw-value #22="Babel helpers" :begin 16244 :end 19129 :pre-blank 0 :contents-begin 16262 :contents-end 19129 :robust-begin 16264 :robust-end 19127 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16244 :title #22# :mode nil :granularity element :cached t :parent #23# :org-element--cache-sync-key nil)) 0] #53=(headline (:raw-value #24="Org" :begin 11143 :end 16244 :pre-blank 0 :contents-begin 11151 :contents-end 16243 :robust-begin 11153 :robust-end 16241 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 11143 :title #24# :mode nil :granularity element :cached t :parent #23# :org-element--cache-sync-key nil)) 0] #51=(headline (:raw-value #25="Fast Latex & Math" :begin 4661 :end 11118 :pre-blank 0 :contents-begin 4683 :contents-end 11117 :robust-begin 4685 :robust-end 11115 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4661 :title #25# :mode nil :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 1] #48=(headline (:raw-value #26="Backend" :begin 3499 :end 3947 :pre-blank 0 :contents-begin 3511 :contents-end 3947 :robust-begin 3513 :robust-end 3945 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3499 :title #26# :mode section :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 0] #35=(headline (:raw-value #27="Theme" :begin 1236 :end 1356 :pre-blank 0 :contents-begin 1246 :contents-end 1356 :robust-begin 1248 :robust-end 1354 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1236 :title #27# :mode nil :granularity element :cached t :parent #7# :org-element--cache-sync-key nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[nil nil #28# 0] [nil nil #3# 0] (section (:begin 1 :end 24 :contents-begin 1 :contents-end 23 :robust-begin 1 :robust-end 21 :post-blank 1 :post-affiliated 1 :mode first-section :granularity element :cached t :parent #28# :org-element--cache-sync-key nil)) 0] [[nil nil #29# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 148 :end 583 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq packages-archives '((\"melpa\" . \"https://melpa.org/packages/\")\12                          (\"org\" . \"https://orgmode.org/elpa/\")\12                          (\"elpa\" . \"https://elpa.gnu.org/packages\")))\12\12(package-initialize)\12(unless package-archive-contents\12  (package-refresh-contents))\12\12(unless (package-installed-p 'use-package)\12  (package-install 'use-package))\12\12(require 'use-package)\12" :post-blank 0 :post-affiliated 148 :mode planning :granularity element :cached t :parent #30=(section (:begin 148 :end 583 :contents-begin 148 :contents-end 583 :robust-begin 148 :robust-end 581 :post-blank 0 :post-affiliated 148 :mode section :granularity element :cached t :parent #29# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #30# 0] (section (:begin 44 :end 136 :contents-begin 44 :contents-end 136 :robust-begin 44 :robust-end 134 :post-blank 0 :post-affiliated 44 :mode section :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[nil nil #31# 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 608 :end 763 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; allow recent-file caching\12(recentf-mode 1)\12(setq history-length 25)\12(savehist-mode 1)\12(save-place-mode 1)\12\12" :post-blank 0 :post-affiliated 608 :mode planning :granularity element :cached t :parent #32=(section (:begin 608 :end 763 :contents-begin 608 :contents-end 763 :robust-begin 608 :robust-end 761 :post-blank 0 :post-affiliated 608 :mode section :granularity element :cached t :parent #31# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil #7# -1] #32# 1] #10# 0] [[[[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 781 :end 1226 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; remove spash screen\12(setq inhibit-startup-message t)\12\12;; remove UI elements\12(menu-bar-mode -1)\12(tool-bar-mode -1)\12(scroll-bar-mode -1)\12(global-display-line-numbers-mode 1)\12\12;; disable some line numbers\12(dolist (mode '(term-mode-hook\12                shell-mode-hook\12                treemacs-mode-hook\12                eshell-mode-hook))\12  (add-hook mode (lambda () (display-line-numbers-mode 0))))\12\12" :post-blank 0 :post-affiliated 781 :mode planning :granularity element :cached t :parent #34=(section (:begin 781 :end 1226 :contents-begin 781 :contents-end 1226 :robust-begin 781 :robust-end 1224 :post-blank 0 :post-affiliated 781 :mode section :granularity element :cached t :parent #33# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #34# 1] [nil nil #35# 0] #36# -1] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 1246 :end 1356 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";(use-package doom-themes\12;  :init (load-theme 'doom-horizon t))\12" :post-blank 0 :post-affiliated 1246 :mode planning :granularity element :cached t :parent #39=(section (:begin 1246 :end 1356 :contents-begin 1246 :contents-end 1356 :robust-begin 1246 :robust-end 1354 :post-blank 0 :post-affiliated 1246 :mode section :granularity element :cached t :parent #35# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil #37# -1] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 1366 :end 1439 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package all-the-icons)\12" :post-blank 0 :post-affiliated 1366 :mode planning :granularity element :cached t :parent #38=(section (:begin 1366 :end 1439 :contents-begin 1366 :contents-end 1439 :robust-begin 1366 :robust-end 1437 :post-blank 0 :post-affiliated 1366 :mode section :granularity element :cached t :parent #37# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #38# -1] #39# 0] [[[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 1452 :end 1598 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";(use-package doom-modeline\12;  :init (doom-modeline-mode 1)\12;  :custom ((doom-modeline-height 15)))\12" :post-blank 1 :post-affiliated 1452 :mode planning :granularity element :cached t :parent #41=(section (:begin 1452 :end 1598 :contents-begin 1452 :contents-end 1597 :robust-begin 1452 :robust-end 1595 :post-blank 1 :post-affiliated 1452 :mode section :granularity element :cached t :parent #40# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #41# 1] [nil nil #42=(section (:begin 1609 :end 1793 :contents-begin 1609 :contents-end 1793 :robust-begin 1609 :robust-end 1791 :post-blank 0 :post-affiliated 1609 :mode section :granularity element :cached t :parent #15# :org-element--cache-sync-key nil)) 0] #15# -1] [[nil nil (plain-list (:type unordered :begin 1628 :end 1649 :contents-begin 1628 :contents-end 1649 :structure ((1628 0 "- " nil nil nil 1636) (1636 0 "- " nil nil nil 1649)) :post-blank 0 :post-affiliated 1628 :mode nil :granularity element :cached t :parent #42# :org-element--cache-sync-key nil)) 0] [nil nil #43# 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 1649 :end 1793 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(global-auto-revert-mode 1)\12(setq use-dialog-box nil\12      global-auto-revert-non-file-buffers t)\12\12" :post-blank 0 :post-affiliated 1649 :mode nil :granularity element :cached t :parent #42# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 1609 :end 1628 :contents-begin 1609 :contents-end 1628 :post-blank 0 :post-affiliated 1609 :mode planning :granularity element :cached t :parent #42# :org-element--cache-sync-key nil)) -1] #40# 0] #33# 1] [[[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 1802 :end 2771 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun rune/evil-hook ()\12  (dolist (mode '(custom-mode\12                  eshell-mode\12                  git-rebase-mode\12                  erc-mode\12                  circe-server-mode\12                  circle-chat-mode\12                  circle-query-mode\12                  sauron-mode\12                  term-mode))\12    (add-to-list 'evil-emacs-state-modes mode)))\12\12(use-package evil\12  :init\12  (setq evil-want-integration t\12        evil-want-keybinding nil\12        evil-want-C-u-scroll t\12        evil-want-C-i-jump nil)\12  :hook (evil-mode . rune/evil-hook)\12  :config\12  (evil-mode 1)\12  (define-key evil-insert-state-map (kbd \"C-g\") 'evil-normal-state)\12  (define-key evil-insert-state-map (kbd \"C-h\" 'evil-delete-backward-char-and-join))\12\12  (evil-set-initial-state 'messages-buffer-mode 'normal)\12  (evil-set-initial-state 'dashboard-mode 'normal))\12\12(use-package evil-collection\12  :after evil\12  :config\12  (evil-collection-init))\12\12" :post-blank 0 :post-affiliated 1802 :mode planning :granularity element :cached t :parent #58=(section (:begin 1802 :end 2771 :contents-begin 1802 :contents-end 2771 :robust-begin 1802 :robust-end 2769 :post-blank 0 :post-affiliated 1802 :mode section :granularity element :cached t :parent #43# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #47=(section (:begin 2784 :end 2947 :contents-begin 2784 :contents-end 2947 :robust-begin 2784 :robust-end 2945 :post-blank 0 :post-affiliated 2784 :mode section :granularity element :cached t :parent #44# :org-element--cache-sync-key nil)) 0] #44# 0] [[nil nil #45# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 2954 :end 3483 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun lsp-mode-setup ()\12  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))\12  (lsp-headerline-breadcrumb-mode))\12\12(use-package lsp-mode\12  :commands (lsp lsp-deferred)\12  :hook (lsp-mode . lsp-mode-setup)\12  :init\12  (setq lsp-keymap-prefix \"C-c l\")\12  :config\12  (lsp-enable-which-key-integration t))\12\12(use-package lsp-ui\12  :hook (lsp-mode . lsp-ui-mode)\12  :custom\12  (lsp-ui-doc-position 'bottom))\12\12(use-package lsp-treemacs\12  :after lsp)\12\12(use-package lsp-ivy)\12" :post-blank 0 :post-affiliated 2954 :mode planning :granularity element :cached t :parent #46=(section (:begin 2954 :end 3483 :contents-begin 2954 :contents-end 3483 :robust-begin 2954 :robust-end 3481 :post-blank 0 :post-affiliated 2954 :mode section :granularity element :cached t :parent #45# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #46# 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 2784 :end 2947 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package which-key\12  :init (which-key-mode)\12  :diminish which-key-mode\12  :config\12  (setq which-key-idle-delay 1))\12" :post-blank 0 :post-affiliated 2784 :mode planning :granularity element :cached t :parent #47# :org-element--cache-sync-key nil)) 0] [[[nil nil #48# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 3511 :end 3947 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package company\12  :after lsp-mode\12  :hook (lsp-mode . company-mode)\12  :bind (:map company-active-map\12              (\"<tab>\" . company-complete-selection))\12        (:map lsp-mode-map\12              (\"<tab>\" . company-indent-or-complete-common))\12  :custom\12  (company-minimum-prefix-length 2)\12  (company-idle-delay 0.0))\12\12(use-package company-box\12  :hook (company-mode . company-box-mode))\12" :post-blank 0 :post-affiliated 3511 :mode planning :granularity element :cached t :parent #49=(section (:begin 3511 :end 3947 :contents-begin 3511 :contents-end 3947 :robust-begin 3511 :robust-end 3945 :post-blank 0 :post-affiliated 3511 :mode section :granularity element :cached t :parent #48# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #49# 0] [[nil nil #52=(section (:begin 3960 :end 4661 :contents-begin 3960 :contents-end 4661 :robust-begin 3960 :robust-end 4659 :post-blank 0 :post-affiliated 3960 :mode section :granularity element :cached t :parent #50# :org-element--cache-sync-key nil)) 0] [nil nil #51# 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 3960 :end 4661 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Yasnippet settings\12(use-package yasnippet\12  :ensure t\12  :hook ((LaTeX-mode . yas-minor-mode)\12         (post-self-insert . my/yas-try-expanding-auto-snippets))\12  :config\12  (use-package warnings\12    :config\12    (cl-pushnew '(yasnippet backquote-change)\12                warning-suppress-types\12                :test 'equal))\12\12  (setq yas-triggers-in-field t)\12\12  ;; Function that tries to autoexpand YaSnippets\12  ;; The double quoting is NOT a typo!\12  (defun my/yas-try-expanding-auto-snippets ()\12    (when (and (boundp 'yas-minor-mode) yas-minor-mode)\12      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))\12        (yas-expand)))))\12\12" :post-blank 0 :post-affiliated 3960 :mode planning :granularity element :cached t :parent #52# :org-element--cache-sync-key nil)) 0] #50# 0] #20# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 4683 :end 11118 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Note that this file does not define any auto-expanding YaSnippets.\12\12;; AucTeX settings - almost no changes\12(use-package latex\12  :ensure auctex\12  :hook ((LaTeX-mode . prettify-symbols-mode))\12  :bind (:map LaTeX-mode-map\12         (\"C-S-e\" . latex-math-from-calc))\12  :config\12  ;; Format math as a Latex string with Calc\12  (defun latex-math-from-calc ()\12    \"Evaluate `calc' on the contents of line at point.\"\12    (interactive)\12    (cond ((region-active-p)\12           (let* ((beg (region-beginning))\12                  (end (region-end))\12                  (string (buffer-substring-no-properties beg end)))\12             (kill-region beg end)\12             (insert (calc-eval `(,string calc-language latex\12                                          calc-prefer-frac t\12                                          calc-angle-mode rad)))))\12          (t (let ((l (thing-at-point 'line)))\12               (end-of-line 1) (kill-line 0)\12               (insert (calc-eval `(,l\12                                    calc-language latex\12                                    calc-prefer-frac t\12                                    calc-angle-mode rad))))))))\12\12(use-package preview\12  :after latex\12  :hook ((LaTeX-mode . preview-larger-previews))\12  :config\12  (defun preview-larger-previews ()\12    (setq preview-scale-function\12          (lambda () (* 1.25\12                   (funcall (preview-scale-from-face)))))))\12\12;; CDLatex settings\12(use-package cdlatex\12  :ensure t\12  :hook (LaTeX-mode . turn-on-cdlatex)\12  :bind (:map cdlatex-mode-map\12              (\"<tab>\" . cdlatex-tab)))\12\12\12;; CDLatex integration with YaSnippet: Allow cdlatex tab to work inside Yas\12;; fields\12(use-package cdlatex\12  :hook ((cdlatex-tab . yas-expand)\12         (cdlatex-tab . cdlatex-in-yas-field))\12  :config\12  (use-package yasnippet\12    :bind (:map yas-keymap\12           (\"<tab>\" . yas-next-field-or-cdlatex)\12           (\"TAB\" . yas-next-field-or-cdlatex))\12    :config\12    (defun cdlatex-in-yas-field ()\12      ;; Check if we're at the end of the Yas field\12      (when-let* ((_ (overlayp yas--active-field-overlay))\12                  (end (overlay-end yas--active-field-overlay)))\12        (if (>= (point) end)\12            ;; Call yas-next-field if cdlatex can't expand here\12            (let ((s (thing-at-point 'sexp)))\12              (unless (and s (assoc (substring-no-properties s)\12                                    cdlatex-command-alist-comb))\12                (yas-next-field-or-maybe-expand)\12                t))\12          ;; otherwise expand and jump to the correct location\12          (let (cdlatex-tab-hook minp)\12            (setq minp\12                  (min (save-excursion (cdlatex-tab)\12                                       (point))\12                       (overlay-end yas--active-field-overlay)))\12            (goto-char minp) t))))\12\12    (defun yas-next-field-or-cdlatex nil\12      (interactive)\12      \"Jump to the next Yas field correctly with cdlatex active.\"\12      (if\12          (or (bound-and-true-p cdlatex-mode)\12              (bound-and-true-p org-cdlatex-mode))\12          (cdlatex-tab)\12        (yas-next-field-or-maybe-expand)))))\12\12;; Array/tabular input with org-tables and cdlatex\12(use-package org-table\12  :after cdlatex\12  :bind (:map orgtbl-mode-map\12              (\"<tab>\" . lazytab-org-table-next-field-maybe)\12              (\"TAB\" . lazytab-org-table-next-field-maybe))\12  :init\12  (add-hook 'cdlatex-tab-hook 'lazytab-cdlatex-or-orgtbl-next-field 90)\12  ;; Tabular environments using cdlatex\12  (add-to-list 'cdlatex-command-alist '(\"smat\" \"Insert smallmatrix env\"\12                                       \"\\\\left( \\\\begin{smallmatrix} ? \\\\end{smallmatrix} \\\\right)\"\12                                       lazytab-position-cursor-and-edit\12                                       nil nil t))\12  (add-to-list 'cdlatex-command-alist '(\"bmat\" \"Insert bmatrix env\"\12                                       \"\\\\begin{bmatrix} ? \\\\end{bmatrix}\"\12                                       lazytab-position-cursor-and-edit\12                                       nil nil t))\12  (add-to-list 'cdlatex-command-alist '(\"pmat\" \"Insert pmatrix env\"\12                                       \"\\\\begin{pmatrix} ? \\\\end{pmatrix}\"\12                                       lazytab-position-cursor-and-edit\12                                       nil nil t))\12  (add-to-list 'cdlatex-command-alist '(\"tbl\" \"Insert table\"\12                                        \"\\\\begin{table}\\n\\\\centering ? \\\\caption{}\\n\\\\end{table}\\n\"\12                                       lazytab-position-cursor-and-edit\12                                       nil t nil))\12  :config\12  ;; Tab handling in org tables\12  (defun lazytab-position-cursor-and-edit ()\12    ;; (if (search-backward \"\\?\" (- (point) 100) t)\12    ;;     (delete-char 1))\12    (cdlatex-position-cursor)\12    (lazytab-orgtbl-edit))\12\12  (defun lazytab-orgtbl-edit ()\12    (advice-add 'orgtbl-ctrl-c-ctrl-c :after #'lazytab-orgtbl-replace)\12    (orgtbl-mode 1)\12    (open-line 1)\12    (insert \"\\n|\"))\12\12  (defun lazytab-orgtbl-replace (_)\12    (interactive \"P\")\12    (unless (org-at-table-p) (user-error \"Not at a table\"))\12    (let* ((table (org-table-to-lisp))\12           params\12           (replacement-table\12            (if (texmathp)\12                (lazytab-orgtbl-to-amsmath table params)\12              (orgtbl-to-latex table params))))\12      (kill-region (org-table-begin) (org-table-end))\12      (open-line 1)\12      (push-mark)\12      (insert replacement-table)\12      (align-regexp (region-beginning) (region-end) \"\\\\([:space:]*\\\\)& \")\12      (orgtbl-mode -1)\12      (advice-remove 'orgtbl-ctrl-c-ctrl-c #'lazytab-orgtbl-replace)))\12\12  (defun lazytab-orgtbl-to-amsmath (table params)\12    (orgtbl-to-generic\12     table\12     (org-combine-plists\12      '(:splice t\12                :lstart \"\"\12                :lend \" \\\\\\\\\"\12                :sep \" & \"\12                :hline nil\12                :llend \"\")\12      params)))\12\12  (defun lazytab-cdlatex-or-orgtbl-next-field ()\12    (when (and (bound-and-true-p orgtbl-mode)\12               (org-table-p)\12               (looking-at \"[[:space:]]*\\\\(?:|\\\\|$\\\\)\")\12               (let ((s (thing-at-point 'sexp)))\12                 (not (and s (assoc s cdlatex-command-alist-comb)))))\12      (call-interactively #'org-table-next-field)\12      t))\12\12  (defun lazytab-org-table-next-field-maybe ()\12    (interactive)\12    (if (bound-and-true-p cdlatex-mode)\12        (cdlatex-tab)\12      (org-table-next-field))))\12\12" :post-blank 1 :post-affiliated 4683 :mode planning :granularity element :cached t :parent #57=(section (:begin 4683 :end 11118 :contents-begin 4683 :contents-end 11117 :robust-begin 4683 :robust-end 11115 :post-blank 1 :post-affiliated 4683 :mode section :granularity element :cached t :parent #51# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil (section (:begin 11137 :end 11143 :contents-begin 11137 :contents-end 11143 :robust-begin 11137 :robust-end 11141 :post-blank 0 :post-affiliated 11137 :mode section :granularity element :cached t :parent #23# :org-element--cache-sync-key nil)) 0] #23# 0] [[nil nil #56=(section (:begin 11151 :end 16244 :contents-begin 11151 :contents-end 16243 :robust-begin 11151 :robust-end 16241 :post-blank 1 :post-affiliated 11151 :mode section :granularity element :cached t :parent #53# :org-element--cache-sync-key nil)) 0] [[nil nil #54# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 16262 :end 19129 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun replace-string-in-current-buffer (from-string to-string)\12  \"Replace FROM-STRING with TO-STRING in the current buffer.\"\12  (save-excursion\12    (goto-char (point-min))\12    (while (search-forward from-string nil t)\12      (replace-match to-string nil t))))\12\12(defun get-number-of-lines ()\12  \"Retrieve the current number of lines\"\12  (interactive)\12  (count-lines (point-min) (point-max)))\12\12(defun delete-hidden-text ()\12  \"Remove all lines from top of the buffer that would be revealed by a call to `widen'\"\12  (interactive)\12  (-let [src-lines (get-number-of-lines)]\12    (widen)\12    (setq-local widen-number-of-lines (get-number-of-lines))\12    (goto-char (point-min))\12    (kill-line (- widen-number-of-lines src-lines))))\12\12(defun string-contains-only-newlines-p (str)\12  \"Check if the string contains only newline characters.\"\12  (unless (or (string-empty-p str)\12              (with-temp-buffer\12                (insert str)\12                (goto-char (point-min))\12                (re-search-forward \"[^[:space:]\\n]\" nil t)))\12    t))\12\12(define-advice org-edit-src-exit\12    (:before (&rest _args))\12  (when (buffer-narrowed-p)\12    (delete-hidden-text)))\12\12(define-advice org-edit-src-save\12    (:before (&rest _args))\12  (when (buffer-narrowed-p)\12    (delete-hidden-text)))\12\12(defun org-babel-tangle-block ()\12  \"Tangle a single file under cursor\"\12  (interactive)\12  (let ((current-prefix-arg '(4)))\12    (call-interactively 'org-babel-tangle)))\12\12(defun org-babel-edit-prep:c (babel-info)\12  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))\12  (lsp))\12\12(defun org-babel-edit-prep:python (babel-info)\12  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))\12  (lsp))\12\12;; Make sure rustic gets activated in the org-src block and add the original file's source code.\12;; only triggers on C-c C-c\12(defun org-babel-edit-prep:cpp (babel-info)\12  ;; get source code in org source block\12  (setq-local src-code (nth 1 babel-info))\12  ;; get filename\12  ;; TODO: needs edge case when tangle = yes\12  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))\12  (message (format \"%s\" src-code))\12  ;; go to first point and insert file content\12  (goto-char (point-min))\12  (insert-file-contents buffer-file-name)\12  ;; replace source code if exists and only if not empty or newlines\12  (unless (string-contains-only-newlines-p (format \"%s\" src-code))\12    (replace-string-in-current-buffer src-code \"\"))\12  ;; count current lines\12  (setq-local n-lines (get-number-of-lines))\12  ;; go to the end of the lines\12  (goto-line n-lines)\12  ;; insert the source block\12  (insert src-code)\12  ;; jump back to the prior position\12  (goto-line n-lines)\12  ;; narrow the region without restriction\12  (narrow-to-region (point) (point-max))\12  (without-restriction)) ;; major mode is automatiically enabled by org-edit-src-code\12\12" :post-blank 0 :post-affiliated 16262 :mode planning :granularity element :cached t :parent #55=(section (:begin 16262 :end 19129 :contents-begin 16262 :contents-end 19129 :robust-begin 16262 :robust-end 19127 :post-blank 0 :post-affiliated 16262 :mode section :granularity element :cached t :parent #54# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #55# 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 11151 :end 16244 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun efs/org-mode-setup ()\12  (org-indent-mode)\12  (variable-pitch-mode 1)\12  (visual-line-mode 1))\12\12(use-package org\12  :hook (org-mode . efs/org-mode-setup)\12  :config\12  (setq org-ellipsis \" ▾\")\12\12  (setq org-agenda-start-with-log-mode t)\12  (setq org-log-done 'time)\12  (setq org-log-into-drawer t)\12\12  (setq org-agenda-files\12        '(\"~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org\"\12          \"~/Projects/Code/emacs-from-scratch/OrgFiles/Habits.org\"\12          \"~/Projects/Code/emacs-from-scratch/OrgFiles/Birthdays.org\"))\12\12  (require 'org-habit)\12  (add-to-list 'org-modules 'org-habit)\12  (setq org-habit-graph-column 60)\12\12  (setq org-todo-keywords\12    '((sequence \"TODO(t)\" \"NEXT(n)\" \"|\" \"DONE(d!)\")\12      (sequence \"BACKLOG(b)\" \"PLAN(p)\" \"READY(r)\" \"ACTIVE(a)\" \"REVIEW(v)\" \"WAIT(w@/!)\" \"HOLD(h)\" \"|\" \"COMPLETED(c)\" \"CANC(k@)\")))\12\12  (setq org-refile-targets\12    '((\"Archive.org\" :maxlevel . 1)\12      (\"Tasks.org\" :maxlevel . 1)))\12\12  ;; Save Org buffers after refiling!\12  (advice-add 'org-refile :after 'org-save-all-org-buffers)\12\12  (setq org-tag-alist\12    '((:startgroup)\12       ; Put mutually exclusive tags here\12       (:endgroup)\12       (\"@errand\" . ?E)\12       (\"@home\" . ?H)\12       (\"@work\" . ?W)\12       (\"agenda\" . ?a)\12       (\"planning\" . ?p)\12       (\"publish\" . ?P)\12       (\"batch\" . ?b)\12       (\"note\" . ?n)\12       (\"idea\" . ?i)))\12\12  ;; Configure custom agenda views\12  (setq org-agenda-custom-commands\12   '((\"d\" \"Dashboard\"\12     ((agenda \"\" ((org-deadline-warning-days 7)))\12      (todo \"NEXT\"\12        ((org-agenda-overriding-header \"Next Tasks\")))\12      (tags-todo \"agenda/ACTIVE\" ((org-agenda-overriding-header \"Active Projects\")))))\12\12    (\"n\" \"Next Tasks\"\12     ((todo \"NEXT\"\12        ((org-agenda-overriding-header \"Next Tasks\")))))\12\12    (\"W\" \"Work Tasks\" tags-todo \"+work-email\")\12\12    ;; Low-effort next actions\12    (\"e\" tags-todo \"+TODO=\\\"NEXT\\\"+Effort<15&+Effort>0\"\12     ((org-agenda-overriding-header \"Low Effort Tasks\")\12      (org-agenda-max-todos 20)\12      (org-agenda-files org-agenda-files)))\12\12    (\"w\" \"Workflow Status\"\12     ((todo \"WAIT\"\12            ((org-agenda-overriding-header \"Waiting on External\")\12             (org-agenda-files org-agenda-files)))\12      (todo \"REVIEW\"\12            ((org-agenda-overriding-header \"In Review\")\12             (org-agenda-files org-agenda-files)))\12      (todo \"PLAN\"\12            ((org-agenda-overriding-header \"In Planning\")\12             (org-agenda-todo-list-sublevels nil)\12             (org-agenda-files org-agenda-files)))\12      (todo \"BACKLOG\"\12            ((org-agenda-overriding-header \"Project Backlog\")\12             (org-agenda-todo-list-sublevels nil)\12             (org-agenda-files org-agenda-files)))\12      (todo \"READY\"\12            ((org-agenda-overriding-header \"Ready for Work\")\12             (org-agenda-files org-agenda-files)))\12      (todo \"ACTIVE\"\12            ((org-agenda-overriding-header \"Active Projects\")\12             (org-agenda-files org-agenda-files)))\12      (todo \"COMPLETED\"\12            ((org-agenda-overriding-header \"Completed Projects\")\12             (org-agenda-files org-agenda-files)))\12      (todo \"CANC\"\12            ((org-agenda-overriding-header \"Cancelled Projects\")\12             (org-agenda-files org-agenda-files)))))))\12\12  (setq org-capture-templates\12    `((\"t\" \"Tasks / Projects\")\12      (\"tt\" \"Task\" entry (file+olp \"~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org\" \"Inbox\")\12           \"* TODO %?\\n  %U\\n  %a\\n  %i\" :empty-lines 1)\12\12      (\"j\" \"Journal Entries\")\12      (\"jj\" \"Journal\" entry\12           (file+olp+datetree \"~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org\")\12           \"\\n* %<%I:%M %p> - Journal :journal:\\n\\n%?\\n\\n\"\12           ;; ,(dw/read-file-as-string \"~/Notes/Templates/Daily.org\")\12           :clock-in :clock-resume\12           :empty-lines 1)\12      (\"jm\" \"Meeting\" entry\12           (file+olp+datetree \"~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org\")\12           \"* %<%I:%M %p> - %a :meetings:\\n\\n%?\\n\\n\"\12           :clock-in :clock-resume\12           :empty-lines 1)\12\12      (\"w\" \"Workflows\")\12      (\"we\" \"Checking Email\" entry (file+olp+datetree \"~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org\")\12           \"* Checking Email :email:\\n\\n%?\" :clock-in :clock-resume :empty-lines 1)\12\12      (\"m\" \"Metrics Capture\")\12      (\"mw\" \"Weight\" table-line (file+headline \"~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org\" \"Weight\")\12       \"| %U | %^{Weight} | %^{Notes} |\" :kill-buffer t)))\12\12  (define-key global-map (kbd \"C-c j\")\12    (lambda () (interactive) (org-capture nil \"jj\")))\12\12  (efs/org-font-setup))\12\12(use-package org-bullets\12  :after org\12  :hook (org-mode . org-bullets-mode)\12  :custom\12  (org-bullets-bullet-list '(\"◉\" \"○\" \"●\" \"○\" \"●\" \"○\" \"●\")))\12\12(defun efs/org-mode-visual-fill ()\12  (setq visual-fill-column-width 100\12        visual-fill-column-center-text t)\12  (visual-fill-column-mode 1))\12\12(use-package visual-fill-column\12  :hook (org-mode . efs/org-mode-visual-fill))\12\12(org-babel-do-load-languages\12  'org-babel-load-languages\12  '((emacs-lisp :tangle yes . t)\12    (C . t)\12    (python . t)))\12\12" :post-blank 1 :post-affiliated 11151 :mode planning :granularity element :cached t :parent #56# :org-element--cache-sync-key nil)) 1] #53# 1] #57# 0] #58# -1] nil nil 0] org-element--cache-compare)))