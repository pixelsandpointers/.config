(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[nil nil #5=(headline (:raw-value #3="Emacs Config" :begin 24 :end 21861 :pre-blank 0 :contents-begin 44 :contents-end 21861 :robust-begin 46 :robust-end 21859 :level 1 :priority nil :tags nil :todo-keyword #("WAIT" 0 1 (wrap-prefix #1=#("* " 0 2 (face org-indent)) line-prefix #2="" display #(" W" 1 2 (cursor t)) face org-modern-todo fontified t) 1 3 (wrap-prefix #1# line-prefix #2# face org-modern-todo fontified t) 3 4 (wrap-prefix #1# line-prefix #2# display "T " face org-modern-todo fontified t)) :todo-type todo :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 24 :title #3# :mode nil :granularity element :cached t :parent #31=(org-data (:begin 1 :contents-begin 1 :contents-end 21861 :end 21861 :robust-begin 3 :robust-end 21859 :post-blank 0 :post-affiliated 1 :path "c:/Users/benja/.emacs.d/init.org" :mode org-data :CATEGORY "init" :cached t :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil #32=(headline (:raw-value #4="Packages" :begin 136 :end 895 :pre-blank 0 :contents-begin 148 :contents-end 894 :robust-begin 150 :robust-end 892 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 136 :title #4# :mode nil :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) -1] [[[nil nil #34=(headline (:raw-value #6="File Cache" :begin 905 :end 1075 :pre-blank 0 :contents-begin 920 :contents-end 1075 :robust-begin 922 :robust-end 1073 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 905 :title #6# :mode section :granularity element :cached t :parent #14=(headline (:raw-value #7="Editor" :begin 895 :end 1075 :pre-blank 0 :contents-begin 905 :contents-end 1075 :robust-begin 907 :robust-end 1073 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 895 :title #7# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #5#)) :org-element--cache-sync-key nil)) 0] [nil nil #36=(headline (:raw-value #8="UI" :begin 1086 :end 1538 :pre-blank 0 :contents-begin 1093 :contents-end 1538 :robust-begin 1095 :robust-end 1536 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1086 :title #8# :mode section :granularity element :cached t :parent #10=(headline (:raw-value #9="Visuals" :begin 1075 :end 2233 :pre-blank 0 :contents-begin 1086 :contents-end 2233 :robust-begin 1088 :robust-end 2231 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1075 :title #9# :parent #5# :cached t :org-element--cache-sync-key nil :granularity element)) :org-element--cache-sync-key nil)) 0] #10# 0] [nil [nil nil #40=(headline (:raw-value #11="Icons" :begin 1924 :end 2020 :pre-blank 0 :contents-begin 1934 :contents-end 2020 :robust-begin 1936 :robust-end 2018 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1924 :title #11# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] #38=(headline (:raw-value #12="Theme" :begin 1548 :end 1924 :pre-blank 0 :contents-begin 1558 :contents-end 1923 :robust-begin 1560 :robust-end 1921 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1548 :title #12# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 1] #42=(headline (:raw-value #13="Font" :begin 1538 :end 1548 :pre-blank 0 :contents-begin nil :contents-end nil :robust-begin nil :robust-end nil :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1538 :title #13# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] #14# 1] [[[[nil nil #17=(headline (:raw-value #15="Editing" :begin 2233 :end 3668 :pre-blank 0 :contents-begin 2244 :contents-end 3668 :robust-begin 2246 :robust-end 3666 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2233 :title #15# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #5#)) 0] [nil nil #48=(headline (:raw-value #16="WhichKey" :begin 3498 :end 3668 :pre-blank 0 :contents-begin 3511 :contents-end 3668 :robust-begin 3513 :robust-end 3666 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3498 :title #16# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #17#)) 0] #46=(headline (:raw-value #18="Evil" :begin 2407 :end 3498 :pre-blank 0 :contents-begin 2416 :contents-end 3497 :robust-begin 2418 :robust-end 3495 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2407 :title #18# :parent #17# :cached t :org-element--cache-sync-key nil :granularity element)) 0] [nil nil #22=(headline (:raw-value #19="Autocomplete" :begin 4217 :end 11800 :pre-blank 0 :contents-begin 4233 :contents-end 11799 :robust-begin 4235 :robust-end 11797 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4217 :title #19# :parent #5# :cached t :granularity element :org-element--cache-sync-key nil)) 0] #49=(headline (:raw-value #20="LSP" :begin 3668 :end 4217 :pre-blank 0 :contents-begin 3675 :contents-end 4216 :robust-begin 3677 :robust-end 4214 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3668 :title #20# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #5#)) -1] [[[nil nil #53=(headline (:raw-value #21="Snippets" :begin 4681 :end 5395 :pre-blank 0 :contents-begin 4694 :contents-end 5395 :robust-begin 4696 :robust-end 5393 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4681 :title #21# :mode nil :granularity element :cached t :parent #22# :org-element--cache-sync-key nil)) 0] [nil nil #26=(headline (:raw-value #23="Org Everything" :begin 11800 :end 21861 :pre-blank 1 :contents-begin 11819 :contents-end 21861 :robust-begin 11821 :robust-end 21859 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 11800 :title #23# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #5#)) 0] #56=(headline (:raw-value #24="Fast Latex & Math" :begin 5395 :end 11800 :pre-blank 0 :contents-begin 5417 :contents-end 11799 :robust-begin 5419 :robust-end 11797 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5395 :title #24# :parent #22# :cached t :org-element--cache-sync-key nil :granularity element)) 0] [nil [nil nil #60=(headline (:raw-value #25="babel helpers" :begin 18976 :end 21861 :pre-blank 0 :contents-begin 18994 :contents-end 21861 :robust-begin 18996 :robust-end 21859 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18976 :title #25# :mode nil :granularity element :cached t :parent #26# :org-element--cache-sync-key nil)) 0] #59=(headline (:raw-value #27="babel settings" :begin 18783 :end 18976 :pre-blank 0 :contents-begin 18802 :contents-end 18975 :robust-begin 18804 :robust-end 18973 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18783 :title #27# :mode nil :granularity element :cached t :parent #26# :org-element--cache-sync-key nil)) 1] #58=(headline (:raw-value #28="Org" :begin 11825 :end 18783 :pre-blank 0 :contents-begin 11833 :contents-end 18783 :robust-begin 11835 :robust-end 18781 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 11825 :title #28# :mode nil :granularity element :cached t :parent #26# :org-element--cache-sync-key nil)) 0] #52=(headline (:raw-value #29="Backend" :begin 4233 :end 4681 :pre-blank 0 :contents-begin 4245 :contents-end 4681 :robust-begin 4247 :robust-end 4679 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4233 :title #29# :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #22#)) 0] #43=(headline (:raw-value #30="Modeline" :begin 2020 :end 2233 :pre-blank 0 :contents-begin 2033 :contents-end 2233 :robust-begin 2035 :robust-end 2231 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2020 :title #30# :parent #10# :cached t :org-element--cache-sync-key nil :granularity element)) 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[nil nil #31# 0] [nil nil #5# 0] (section (:begin 1 :end 24 :contents-begin 1 :contents-end 23 :robust-begin 1 :robust-end 21 :post-blank 1 :post-affiliated 1 :mode first-section :granularity element :cached t :parent #31# :org-element--cache-sync-key nil)) 0] [[nil nil #32# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 148 :end 879 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (set-language-environment \"UTF-8\")\12  (require 'package)\12  (setq package-archives '((\"nongnu\" . \"https://elpa.nongnu.org/nongnu/\")\12                           (\"elpa\" . \"https://elpa.gnu.org/packages\")\12                           (\"melpa\" . \"https://melpa.org/packages/\")\12                           (\"org\" . \"https://orgmode.org/elpa/\")))\12\12  (package-initialize)\12  (unless package-archive-contents\12    (package-refresh-contents))\12  (unless (package-installed-p 'use-package)\12    (package-refresh-contents)\12    (package-install 'use-package))\12  (unless (package-installed-p 'use-package)\12    (package-install 'use-package))\12\12  (require 'use-package)\12  (setq use-package-always-ensure t)\12" :post-blank 1 :post-affiliated 148 :mode planning :granularity element :cached t :parent #33=(section (:begin 148 :end 895 :contents-begin 148 :contents-end 894 :robust-begin 148 :robust-end 892 :post-blank 1 :post-affiliated 148 :mode section :granularity element :cached t :parent #32# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #33# 0] (section (:begin 44 :end 136 :contents-begin 44 :contents-end 136 :robust-begin 44 :robust-end 134 :post-blank 0 :post-affiliated 44 :mode section :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) 0] [[[[nil nil #34# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 920 :end 1075 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; allow recent-file caching\12(recentf-mode 1)\12(setq history-length 25)\12(savehist-mode 1)\12(save-place-mode 1)\12\12" :post-blank 0 :post-affiliated 920 :mode planning :granularity element :cached t :parent #35=(section (:begin 920 :end 1075 :contents-begin 920 :contents-end 1075 :robust-begin 920 :robust-end 1073 :post-blank 0 :post-affiliated 920 :mode section :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #35# 0] [[nil nil #36# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 1093 :end 1538 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; remove spash screen\12(setq inhibit-startup-message t)\12\12;; remove UI elements\12(menu-bar-mode -1)\12(tool-bar-mode -1)\12(scroll-bar-mode -1)\12(global-display-line-numbers-mode 1)\12\12;; disable some line numbers\12(dolist (mode '(term-mode-hook\12                shell-mode-hook\12                treemacs-mode-hook\12                eshell-mode-hook))\12  (add-hook mode (lambda () (display-line-numbers-mode 0))))\12\12" :post-blank 0 :post-affiliated 1093 :mode planning :granularity element :cached t :parent #37=(section (:begin 1093 :end 1538 :contents-begin 1093 :contents-end 1538 :robust-begin 1093 :robust-end 1536 :post-blank 0 :post-affiliated 1093 :mode section :granularity element :cached t :parent #36# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #37# 0] #10# 0] [[[nil nil #38# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 1558 :end 1924 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package doom-themes\12    :ensure t\12    :config\12    (setq doom-themes-enable-bold t\12          doom-themes-enable-italic t)\12    (load-theme 'doom-horizon t)\12    (doom-themes-visual-bell-config)\12    ;(doom-themes-neotree-config)\12    ;(setq doom-themes-treemacs-theme \"doom-horizon\")\12    (doom-themes-org-config))\12" :post-blank 1 :post-affiliated 1558 :mode planning :granularity element :cached t :parent #39=(section (:begin 1558 :end 1924 :contents-begin 1558 :contents-end 1923 :robust-begin 1558 :robust-end 1921 :post-blank 1 :post-affiliated 1558 :mode section :granularity element :cached t :parent #38# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #39# 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 1934 :end 2020 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package nerd-icons\12    :ensure t)\12" :post-blank 0 :post-affiliated 1934 :mode planning :granularity element :cached t :parent #41=(section (:begin 1934 :end 2020 :contents-begin 1934 :contents-end 2020 :robust-begin 1934 :robust-end 2018 :post-blank 0 :post-affiliated 1934 :mode section :granularity element :cached t :parent #40# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #41# 1] #40# 0] #42# 0] #14# 1] [[[[[nil nil #44=(section (:begin 2033 :end 2233 :contents-begin 2033 :contents-end 2233 :robust-begin 2033 :robust-end 2231 :post-blank 0 :post-affiliated 2033 :mode section :granularity element :cached t :parent #43# :org-element--cache-sync-key nil)) 0] nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 2033 :end 2233 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (use-package doom-modeline\12        :ensure t\12        :hook (after-init . doom-modeline-mode)\12        :config\12        (setq doom-modeline-height 30))\12" :post-blank 0 :post-affiliated 2033 :mode planning :granularity element :cached t :parent #44# :org-element--cache-sync-key nil)) -1] [[nil nil #45=(section (:begin 2244 :end 2407 :contents-begin 2244 :contents-end 2407 :robust-begin 2244 :robust-end 2405 :post-blank 0 :post-affiliated 2244 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #17#)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 2263 :end 2407 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(global-auto-revert-mode 1)\12(setq use-dialog-box nil\12      global-auto-revert-non-file-buffers t)\12\12" :post-blank 0 :post-affiliated 2263 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #45#)) 0] (paragraph (:begin 2244 :end 2263 :contents-begin 2244 :contents-end 2263 :post-blank 0 :post-affiliated 2244 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #45#)) 0] #17# 0] [[[[nil nil #47=(section (:begin 2416 :end 3498 :contents-begin 2416 :contents-end 3497 :robust-begin 2416 :robust-end 3495 :post-blank 1 :post-affiliated 2416 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #46#)) 0] [nil nil (keyword (:key "RESULTS" :value "" :begin 3486 :end 3498 :post-blank 1 :post-affiliated 3486 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #47#)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 2416 :end 3486 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rune/evil-hook ()\12    (dolist (mode '(custom-mode\12                    eshell-mode\12                    git-rebase-mode\12                    erc-mode\12                    circe-server-mode\12                    circle-chat-mode\12                    circle-query-mode\12                    sauron-mode\12                    term-mode))\12      (add-to-list 'evil-emacs-state-modes mode)))\12\12  (use-package evil\12    :init\12    (setq evil-want-integration t\12          evil-want-keybinding nil\12          evil-want-C-u-scroll t\12          evil-want-C-i-jump nil)\12    :hook (evil-mode . rune/evil-hook)\12    :config\12    (evil-mode 1)\12    (define-key evil-insert-state-map (kbd \"C-g\") 'evil-normal-state)\12    (define-key evil-insert-state-map (kbd \"C-h\") 'evil-delete-backward-char-and-join)\12\12    (evil-set-initial-state 'messages-buffer-mode 'normal)\12    (evil-set-initial-state 'dashboard-mode 'normal))\12\12  (use-package evil-collection\12    :after evil\12    :hook (evil-mode . evil-collection-init)\12    :config\12    (evil-collection-init))\12" :post-blank 1 :post-affiliated 2416 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #47#)) 0] [[nil nil #50=(section (:begin 3511 :end 3668 :contents-begin 3511 :contents-end 3668 :robust-begin 3511 :robust-end 3666 :post-blank 0 :post-affiliated 3511 :mode section :granularity element :cached t :parent #48# :org-element--cache-sync-key nil)) 0] [nil nil #49# 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 3511 :end 3668 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package which-key\12    :hook (after-init . which-key-mode)\12    :config\12    (setq which-key-idle-delay 1))\12" :post-blank 0 :post-affiliated 3511 :mode planning :granularity element :cached t :parent #50# :org-element--cache-sync-key nil)) 0] #48# 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 3675 :end 4205 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun lsp-mode-setup ()\12  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))\12  (lsp-headerline-breadcrumb-mode))\12\12(use-package lsp-mode\12  :commands (lsp lsp-deferred)\12  :hook (lsp-mode . lsp-mode-setup)\12  :init\12  (setq lsp-keymap-prefix \"C-c l\")\12  :config\12  (lsp-enable-which-key-integration t))\12\12(use-package lsp-ui\12  :hook (lsp-mode . lsp-ui-mode)\12  :custom\12  (lsp-ui-doc-position 'bottom))\12\12(use-package lsp-treemacs\12  :after lsp)\12\12(use-package lsp-ivy)\12" :post-blank 1 :post-affiliated 3675 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #51=(section (:begin 3675 :end 4217 :contents-begin 3675 :contents-end 4216 :robust-begin 3675 :robust-end 4214 :post-blank 1 :post-affiliated 3675 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #49#)))) 0] [nil nil #22# 0] (keyword (:key "RESULTS" :value #2# :begin 4205 :end 4217 :post-blank 1 :post-affiliated 4205 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #51#)) 0] #51# -1] #46# 1] [[[[nil nil #54=(section (:begin 4245 :end 4681 :contents-begin 4245 :contents-end 4681 :robust-begin 4245 :robust-end 4679 :post-blank 0 :post-affiliated 4245 :mode section :granularity element :cached t :parent #52# :org-element--cache-sync-key nil)) 0] [nil nil #53# 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 4245 :end 4681 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package company\12  :after lsp-mode\12  :hook (lsp-mode . company-mode)\12  :bind (:map company-active-map\12              (\"<tab>\" . company-complete-selection))\12        (:map lsp-mode-map\12              (\"<tab>\" . company-indent-or-complete-common))\12  :custom\12  (company-minimum-prefix-length 2)\12  (company-idle-delay 0.0))\12\12(use-package company-box\12  :hook (company-mode . company-box-mode))\12" :post-blank 0 :post-affiliated 4245 :mode planning :granularity element :cached t :parent #54# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 4694 :end 5395 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Yasnippet settings\12(use-package yasnippet\12  :ensure t\12  :hook ((LaTeX-mode . yas-minor-mode)\12         (post-self-insert . my/yas-try-expanding-auto-snippets))\12  :config\12  (use-package warnings\12    :config\12    (cl-pushnew '(yasnippet backquote-change)\12                warning-suppress-types\12                :test 'equal))\12\12  (setq yas-triggers-in-field t)\12\12  ;; Function that tries to autoexpand YaSnippets\12  ;; The double quoting is NOT a typo!\12  (defun my/yas-try-expanding-auto-snippets ()\12    (when (and (boundp 'yas-minor-mode) yas-minor-mode)\12      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))\12        (yas-expand)))))\12\12" :post-blank 0 :post-affiliated 4694 :mode planning :granularity element :cached t :parent #55=(section (:begin 4694 :end 5395 :contents-begin 4694 :contents-end 5395 :robust-begin 4694 :robust-end 5393 :post-blank 0 :post-affiliated 4694 :mode section :granularity element :cached t :parent #53# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #55# -1] [[[[nil nil #57=(section (:begin 5417 :end 11800 :contents-begin 5417 :contents-end 11799 :robust-begin 5417 :robust-end 11797 :post-blank 1 :post-affiliated 5417 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #56#)) 0] [nil nil (fixed-width (:begin 11760 :end 11800 :value "yas-next-field-or-cdlatex" :post-blank 2 :post-affiliated 11771 :results (#2#) :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #57#)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 5417 :end 11760 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; Note that this file does not define any auto-expanding YaSnippets.\12\12  ;; AucTeX settings - almost no changes\12  (use-package latex\12    :ensure auctex\12    :hook ((LaTeX-mode . prettify-symbols-mode))\12    :bind (:map LaTeX-mode-map\12           (\"C-S-e\" . latex-math-from-calc))\12    :config\12    ;; Format math as a Latex string with Calc\12    (defun latex-math-from-calc ()\12      \"Evaluate `calc' on the contents of line at point.\"\12      (interactive)\12      (cond ((region-active-p)\12             (let* ((beg (region-beginning))\12                    (end (region-end))\12                    (string (buffer-substring-no-properties beg end)))\12               (kill-region beg end)\12               (insert (calc-eval `(,string calc-language latex\12                                            calc-prefer-frac t\12                                            calc-angle-mode rad)))))\12            (t (let ((l (thing-at-point 'line)))\12                 (end-of-line 1) (kill-line 0)\12                 (insert (calc-eval `(,l\12                                      calc-language latex\12                                      calc-prefer-frac t\12                                      calc-angle-mode rad))))))))\12\12  ;; CDLatex settings\12  (use-package cdlatex\12    :ensure t\12    :hook (LaTeX-mode . turn-on-cdlatex)\12    :bind (:map cdlatex-mode-map\12                (\"<tab>\" . cdlatex-tab)))\12    :config\12    (use-package yasnippet\12      :bind (:map yas-keymap\12             (\"<tab>\" . yas-next-field-or-cdlatex)\12             (\"TAB\" . yas-next-field-or-cdlatex))\12      :config\12      (defun cdlatex-in-yas-field ()\12        ;; Check if we're at the end of the Yas field\12        (when-let* ((_ (overlayp yas--active-field-overlay))\12                    (end (overlay-end yas--active-field-overlay)))\12          (if (>= (point) end)\12              ;; Call yas-next-field if cdlatex can't expand here\12              (let ((s (thing-at-point 'sexp)))\12                (unless (and s (assoc (substring-no-properties s)\12                                      cdlatex-command-alist-comb))\12                  (yas-next-field-or-maybe-expand)\12                  t))\12            ;; otherwise expand and jump to the correct location\12            (let (cdlatex-tab-hook minp)\12              (setq minp\12                    (min (save-excursion (cdlatex-tab)\12                                         (point))\12                         (overlay-end yas--active-field-overlay)))\12              (goto-char minp) t))))\12\12      (defun yas-next-field-or-cdlatex nil\12        (interactive)\12        \"Jump to the next Yas field correctly with cdlatex active.\"\12        (if\12            (or (bound-and-true-p cdlatex-mode)\12                (bound-and-true-p org-cdlatex-mode))\12            (cdlatex-tab)\12          (yas-next-field-or-maybe-expand))))\12\12  ;; Array/tabular input with org-tables and cdlatex\12  ;(require 'org-table\12   ; :after cdlatex\12   ; :bind (:map orgtbl-mode-map\12   ;             (\"<tab>\" . lazytab-org-table-next-field-maybe)\12   ;             (\"TAB\" . lazytab-org-table-next-field-maybe))\12   ; :init\12   ; (add-hook 'cdlatex-tab-hook 'lazytab-cdlatex-or-orgtbl-next-field 90)\12   ; ;; Tabular environments using cdlatex\12   ; (add-to-list 'cdlatex-command-alist '(\"smat\" \"Insert smallmatrix env\"\12   ;                                      \"\\\\left( \\\\begin{smallmatrix} ? \\\\end{smallmatrix} \\\\right)\"\12   ;                                      lazytab-position-cursor-and-edit\12   ;                                      nil nil t))\12   ; (add-to-list 'cdlatex-command-alist '(\"bmat\" \"Insert bmatrix env\"\12   ;                                      \"\\\\begin{bmatrix} ? \\\\end{bmatrix}\"\12   ;                                      lazytab-position-cursor-and-edit\12   ;                                      nil nil t))\12   ; (add-to-list 'cdlatex-command-alist '(\"pmat\" \"Insert pmatrix env\"\12   ;                                      \"\\\\begin{pmatrix} ? \\\\end{pmatrix}\"\12   ;                                      lazytab-position-cursor-and-edit\12   ;                                      nil nil t))\12   ; (add-to-list 'cdlatex-command-alist '(\"tbl\" \"Insert table\"\12   ;                                       \"\\\\begin{table}\\n\\\\centering ? \\\\caption{}\\n\\\\end{table}\\n\"\12   ;                                      lazytab-position-cursor-and-edit\12   ;                                      nil t nil))\12    ;:config\12    ;;; Tab handling in org tables\12    ;(defun lazytab-position-cursor-and-edit ()\12    ;  ;; (if (search-backward \"\\?\" (- (point) 100) t)\12    ;  ;;     (delete-char 1))\12    ;  (cdlatex-position-cursor)\12    ;  (lazytab-orgtbl-edit))\12\12    ;(defun lazytab-orgtbl-edit ()\12    ;  (advice-add 'orgtbl-ctrl-c-ctrl-c :after #'lazytab-orgtbl-replace)\12    ;  (orgtbl-mode 1)\12    ;  (open-line 1)\12    ;  (insert \"\\n|\"))\12\12    ;(defun lazytab-orgtbl-replace (_)\12    ;  (interactive \"P\")\12    ;  (unless (org-at-table-p) (user-error \"Not at a table\"))\12    ;  (let* ((table (org-table-to-lisp))\12    ;         params\12    ;         (replacement-table\12    ;          (if (texmathp)\12    ;              (lazytab-orgtbl-to-amsmath table params)\12    ;            (orgtbl-to-latex table params))))\12    ;    (kill-region (org-table-begin) (org-table-end))\12    ;    (open-line 1)\12    ;    (push-mark)\12    ;    (insert replacement-table)\12    ;    (align-regexp (region-beginning) (region-end) \"\\\\([:space:]*\\\\)& \")\12    ;    (orgtbl-mode -1)\12    ;    (advice-remove 'orgtbl-ctrl-c-ctrl-c #'lazytab-orgtbl-replace)))\12\12    ;(defun lazytab-orgtbl-to-amsmath (table params)\12    ;  (orgtbl-to-generic\12    ;   table\12    ;   (org-combine-plists\12    ;    '(:splice t\12    ;              :lstart \"\"\12    ;              :lend \" \\\\\\\\\"\12    ;              :sep \" & \"\12    ;              :hline nil\12    ;              :llend \"\")\12    ;    params)))\12\12    ;(defun lazytab-cdlatex-or-orgtbl-next-field ()\12    ;  (when (and (bound-and-true-p orgtbl-mode)\12    ;             (org-table-p)\12    ;             (looking-at \"[[:space:]]*\\\\(?:|\\\\|$\\\\)\")\12    ;             (let ((s (thing-at-point 'sexp)))\12    ;               (not (and s (assoc s cdlatex-command-alist-comb)))))\12    ;    (call-interactively #'org-table-next-field)\12    ;    t))\12\12    ;(defun lazytab-org-table-next-field-maybe ()\12    ;  (interactive)\12    ;  (if (bound-and-true-p cdlatex-mode)\12    ;      (cdlatex-tab)\12    ;    (org-table-next-field))))\12\12" :post-blank 1 :post-affiliated 5417 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #57#)) 0] [nil [nil nil #58# 0] (section (:begin 11819 :end 11825 :contents-begin 11819 :contents-end 11825 :robust-begin 11819 :robust-end 11823 :post-blank 0 :post-affiliated 11819 :mode section :granularity element :cached t :parent #26# :org-element--cache-sync-key nil)) 1] #26# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 11833 :end 18783 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (defun efs/org-mode-setup ()\12        (org-indent-mode)\12        (variable-pitch-mode 1)\12        (visual-line-mode 1))\12\12      (use-package org\12        :hook (org-mode . efs/org-mode-setup)\12        :config\12        (setq org-ellipsis \" ▾\")\12\12        (setq org-agenda-start-with-log-mode t)\12        (setq org-log-done 'time)\12        (setq org-log-into-drawer t)\12\12        (setq org-agenda-files\12              '(\"~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org\"\12                \"~/Projects/Code/emacs-from-scratch/OrgFiles/Habits.org\"\12                \"~/Projects/Code/emacs-from-scratch/OrgFiles/Birthdays.org\"))\12\12        (require 'org-habit)\12        (add-to-list 'org-modules 'org-habit)\12        (setq org-habit-graph-column 60)\12\12        (setq org-todo-keywords\12              '((sequence \"TODO(t)\" \"NEXT(n)\" \"|\" \"DONE(d!)\")\12                (sequence \"BACKLOG(b)\" \"PLAN(p)\" \"READY(r)\" \"ACTIVE(a)\" \"REVIEW(v)\" \"WAIT(w@/!)\" \"HOLD(h)\" \"|\" \"COMPLETED(c)\" \"CANC(k@)\")))\12\12        (setq org-refile-targets\12              '((\"Archive.org\" :maxlevel . 1)\12                (\"Tasks.org\" :maxlevel . 1)))\12\12        ;; Save Org buffers after refiling!\12        (advice-add 'org-refile :after 'org-save-all-org-buffers)\12\12        (setq org-tag-alist\12              '((:startgroup)\12                                              ; Put mutually exclusive tags here\12                (:endgroup)\12                (\"@errand\" . ?E)\12                (\"@home\" . ?H)\12                (\"@work\" . ?W)\12                (\"agenda\" . ?a)\12                (\"planning\" . ?p)\12                (\"publish\" . ?P)\12                (\"batch\" . ?b)\12                (\"note\" . ?n)\12                (\"idea\" . ?i)))\12\12        ;; Configure custom agenda views\12        (setq org-agenda-custom-commands\12              '((\"d\" \"Dashboard\"\12                 ((agenda \"\" ((org-deadline-warning-days 7)))\12                  (todo \"NEXT\"\12                        ((org-agenda-overriding-header \"Next Tasks\")))\12                  (tags-todo \"agenda/ACTIVE\" ((org-agenda-overriding-header \"Active Projects\")))))\12\12                (\"n\" \"Next Tasks\"\12                 ((todo \"NEXT\"\12                        ((org-agenda-overriding-header \"Next Tasks\")))))\12\12                (\"W\" \"Work Tasks\" tags-todo \"+work-email\")\12\12                ;; Low-effort next actions\12                (\"e\" tags-todo \"+TODO=\\\"NEXT\\\"+Effort<15&+Effort>0\"\12                 ((org-agenda-overriding-header \"Low Effort Tasks\")\12                  (org-agenda-max-todos 20)\12                  (org-agenda-files org-agenda-files)))\12\12                (\"w\" \"Workflow Status\"\12                 ((todo \"WAIT\"\12                        ((org-agenda-overriding-header \"Waiting on External\")\12                         (org-agenda-files org-agenda-files)))\12                  (todo \"REVIEW\"\12                        ((org-agenda-overriding-header \"In Review\")\12                         (org-agenda-files org-agenda-files)))\12                  (todo \"PLAN\"\12                        ((org-agenda-overriding-header \"In Planning\")\12                         (org-agenda-todo-list-sublevels nil)\12                         (org-agenda-files org-agenda-files)))\12                  (todo \"BACKLOG\"\12                        ((org-agenda-overriding-header \"Project Backlog\")\12                         (org-agenda-todo-list-sublevels nil)\12                         (org-agenda-files org-agenda-files)))\12                  (todo \"READY\"\12                        ((org-agenda-overriding-header \"Ready for Work\")\12                         (org-agenda-files org-agenda-files)))\12                  (todo \"ACTIVE\"\12                        ((org-agenda-overriding-header \"Active Projects\")\12                         (org-agenda-files org-agenda-files)))\12                  (todo \"COMPLETED\"\12                        ((org-agenda-overriding-header \"Completed Projects\")\12                         (org-agenda-files org-agenda-files)))\12                  (todo \"CANC\"\12                        ((org-agenda-overriding-header \"Cancelled Projects\")\12                         (org-agenda-files org-agenda-files)))))))\12\12        (setq org-capture-templates\12              `((\"t\" \"Tasks / Projects\")\12                (\"tt\" \"Task\" entry (file+olp \"~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org\" \"Inbox\")\12                 \"* TODO %?\\n  %U\\n  %a\\n  %i\" :empty-lines 1)\12\12                (\"j\" \"Journal Entries\")\12                (\"jj\" \"Journal\" entry\12                 (file+olp+datetree \"~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org\")\12                 \"\\n* %<%I:%M %p> - Journal :journal:\\n\\n%?\\n\\n\"\12                 ;; ,(dw/read-file-as-string \"~/Notes/Templates/Daily.org\")\12                 :clock-in :clock-resume\12                 :empty-lines 1)\12                (\"jm\" \"Meeting\" entry\12                 (file+olp+datetree \"~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org\")\12                 \"* %<%I:%M %p> - %a :meetings:\\n\\n%?\\n\\n\"\12                 :clock-in :clock-resume\12                 :empty-lines 1)\12\12                (\"w\" \"Workflows\")\12                (\"we\" \"Checking Email\" entry (file+olp+datetree \"~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org\")\12                 \"* Checking Email :email:\\n\\n%?\" :clock-in :clock-resume :empty-lines 1)\12\12                (\"m\" \"Metrics Capture\")\12                (\"mw\" \"Weight\" table-line (file+headline \"~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org\" \"Weight\")\12                 \"| %U | %^{Weight} | %^{Notes} |\" :kill-buffer t)))\12\12        (define-key global-map (kbd \"C-c j\")\12                    (lambda () (interactive) (org-capture nil \"jj\"))))\12\12      (use-package org-bullets\12        :after org\12        :hook (org-mode . org-bullets-mode))\12\12      (use-package org-modern\12        :hook (org-mode . org-modern-mode)\12        :config\12    (modify-all-frames-parameters\12     '((right-divider-width . 40)\12       (internal-border-width . 40)))\12    (dolist (face '(window-divider\12                    window-divider-first-pixel\12                    window-divider-last-pixel))\12      (face-spec-reset-face face)\12      (set-face-foreground face (face-attribute 'default :background)))\12    (set-face-background 'fringe (face-attribute 'default :background))\12\12    (setq\12     ;; Edit settings\12     org-auto-align-tags nil\12     org-tags-column 0\12     org-catch-invisible-edits 'show-and-error\12     org-special-ctrl-a/e t\12     org-insert-heading-respect-content t\12\12     ;; Org styling, hide markup etc.\12     org-hide-emphasis-markers t\12     org-pretty-entities t\12\12     ;; Agenda styling\12     org-agenda-tags-column 0\12     org-agenda-block-separator ?─\12     org-agenda-time-grid\12     '((daily today require-timed)\12       (800 1000 1200 1400 1600 1800 2000)\12       \" ┄┄┄┄┄ \" \"┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄\")\12     org-agenda-current-time-string\12     \"◀── now ─────────────────────────────────────────────────\")\12\12    ;; Ellipsis styling\12    (setq org-ellipsis \"…\")\12    (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil))\12" :post-blank 0 :post-affiliated 11833 :mode planning :granularity element :cached t :parent #63=(section (:begin 11833 :end 18783 :contents-begin 11833 :contents-end 18783 :robust-begin 11833 :robust-end 18781 :post-blank 0 :post-affiliated 11833 :mode section :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #62=(section (:begin 18802 :end 18976 :contents-begin 18802 :contents-end 18975 :robust-begin 18802 :robust-end 18973 :post-blank 1 :post-affiliated 18802 :mode section :granularity element :cached t :parent #59# :org-element--cache-sync-key nil)) 0] #59# 0] [[nil nil #60# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 18994 :end 21861 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun replace-string-in-current-buffer (from-string to-string)\12  \"replace from-string with to-string in the current buffer.\"\12  (save-excursion\12    (goto-char (point-min))\12    (while (search-forward from-string nil t)\12      (replace-match to-string nil t))))\12\12(defun get-number-of-lines ()\12  \"retrieve the current number of lines\"\12  (interactive)\12  (count-lines (point-min) (point-max)))\12\12(defun delete-hidden-text ()\12  \"remove all lines from top of the buffer that would be revealed by a call to `widen'\"\12  (interactive)\12  (-let [src-lines (get-number-of-lines)]\12    (widen)\12    (setq-local widen-number-of-lines (get-number-of-lines))\12    (goto-char (point-min))\12    (kill-line (- widen-number-of-lines src-lines))))\12\12(defun string-contains-only-newlines-p (str)\12  \"check if the string contains only newline characters.\"\12  (unless (or (string-empty-p str)\12              (with-temp-buffer\12                (insert str)\12                (goto-char (point-min))\12                (re-search-forward \"[^[:space:]\\n]\" nil t)))\12    t))\12\12(define-advice org-edit-src-exit\12    (:before (&rest _args))\12  (when (buffer-narrowed-p)\12    (delete-hidden-text)))\12\12(define-advice org-edit-src-save\12    (:before (&rest _args))\12  (when (buffer-narrowed-p)\12    (delete-hidden-text)))\12\12(defun org-babel-tangle-block ()\12  \"tangle a single file under cursor\"\12  (interactive)\12  (let ((current-prefix-arg '(4)))\12    (call-interactively 'org-babel-tangle)))\12\12(defun org-babel-edit-prep:c (babel-info)\12  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))\12  (lsp))\12\12(defun org-babel-edit-prep:python (babel-info)\12  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))\12  (lsp))\12\12;; make sure rustic gets activated in the org-src block and add the original file's source code.\12;; only triggers on c-c c-c\12(defun org-babel-edit-prep:cpp (babel-info)\12  ;; get source code in org source block\12  (setq-local src-code (nth 1 babel-info))\12  ;; get filename\12  ;; todo: needs edge case when tangle = yes\12  (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))\12  (message (format \"%s\" src-code))\12  ;; go to first point and insert file content\12  (goto-char (point-min))\12  (insert-file-contents buffer-file-name)\12  ;; replace source code if exists and only if not empty or newlines\12  (unless (string-contains-only-newlines-p (format \"%s\" src-code))\12    (replace-string-in-current-buffer src-code \"\"))\12  ;; count current lines\12  (setq-local n-lines (get-number-of-lines))\12  ;; go to the end of the lines\12  (goto-line n-lines)\12  ;; insert the source block\12  (insert src-code)\12  ;; jump back to the prior position\12  (goto-line n-lines)\12  ;; narrow the region without restriction\12  (narrow-to-region (point) (point-max))\12  (without-restriction)) ;; major mode is automatiically enabled by org-edit-src-code\12\12" :post-blank 0 :post-affiliated 18994 :mode planning :granularity element :cached t :parent #61=(section (:begin 18994 :end 21861 :contents-begin 18994 :contents-end 21861 :robust-begin 18994 :robust-end 21859 :post-blank 0 :post-affiliated 18994 :mode section :granularity element :cached t :parent #60# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #61# 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle yes" :begin 18802 :end 18964 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (org-babel-do-load-languages\12   'org-babel-load-languages\12   '((emacs-lisp . t)\12     (C . t)\12     (python . t)))\12\12" :post-blank 1 :post-affiliated 18802 :mode planning :granularity element :cached t :parent #62# :org-element--cache-sync-key nil)) 0] #63# 0] #56# 1] #52# 0] #43# 1] nil nil 0] org-element--cache-compare)))